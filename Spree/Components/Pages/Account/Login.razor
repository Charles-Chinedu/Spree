@page "/login"
@rendermode InteractiveServer

<h2>Login</h2>
<hr />
<EditForm Model="@User" OnValidSubmit="LoginClicked">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label class="form-label">Email Address</label>
        <InputText @bind-Value="User.Email" class="form-control"></InputText>
        <ValidationMessage For="() => User.Email" class="text-danger"/>
    </div>
    <div class="form-group">
        <label class="form-label">Password</label>
        <InputText @bind-Value="User.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="() => User.Password" class="text-danger" />
    </div>
    <div class="form-group mt-3">
        @if (messageDialogService.ShowSaveButton)
        {
            <button class="btn btn-primary" type="submit">Login</button>
        }
        <BusyButton ShowBusyButton="messageDialogService.ShowBusyButton"></BusyButton>
    </div>
</EditForm>
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>

@code {
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    LoginDTO User = new();
    async Task LoginClicked()
    {
        messageDialogService.ShowSaveButton = false;
        messageDialogService.ShowBusyButton = !messageDialogService.ShowSaveButton;
        // var response = await accountService.LoginAsync(User);
        var (flag, message, jwt) = await accountService.LoginAsync(User);
        if (!flag)
        {
            messageDialogService.messageDialog!.SetDialogValues("danger", message);
            messageDialogService.SetMessageDialog();
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(jwt);
        NavManager.NavigateTo("/", forceLoad: true);
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
