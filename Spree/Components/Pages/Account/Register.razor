@page "/register"
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<h2>Register</h2>
<hr />
<EditForm Model="@User" OnValidSubmit="RegisterClicked">
    <DataAnnotationsValidator />
    <div class="form-group col-12">
        <label class="form-label">Name</label>
        <InputText @bind-Value="User.Name" class="form-control"></InputText>
        <ValidationMessage For="() => User.Name" class="text-danger" />
    </div>
    <div class="form-group col-12">
        <label class="form-label">Email Address</label>
        <InputText @bind-Value="User.Email" class="form-control"></InputText>
        <ValidationMessage For="() => User.Email" class="text-danger" />
    </div>
    <div class="form-group col-12">
        <label class="form-label">Password</label>
        <InputText @bind-Value="User.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="() => User.Password" class="text-danger" />
    </div>
    <div class="form-group col-12">
        <label class="form-label">Confirm Password</label>
        <InputText @bind-Value="User.ConfirmPassword" type="password" class="form-control"></InputText>
        <ValidationMessage For="() => User.ConfirmPassword" class="text-danger" />
    </div>
    <div class="form-group mt-3 d-flex justify-content-between">
        @if (messageDialogService.ShowSaveButton)
        {
            <button class="btn btn-primary" type="submit">Register</button>
        }
        <BusyButton ShowBusyButton="messageDialogService.ShowBusyButton"></BusyButton>
        <a href="login" class="col-3">Login</a>
    </div>
</EditForm>
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>

@code {
    RegisterDTO User = new();
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }

    async Task RegisterClicked()
    {
        messageDialogService.ShowSaveButton = false;
        messageDialogService.ShowBusyButton = !messageDialogService.ShowSaveButton;
        var (flag, message) = await accountService.RegisterAsync(User);
        if (flag)
        {
            messageDialogService.messageDialog!.SetDialogValues("success", message);
            User = new();
        }
        else
        { 
            messageDialogService.messageDialog!.SetDialogValues("danger", message);
            return;
        }
        messageDialogService.SetMessageDialog();
    }

    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
